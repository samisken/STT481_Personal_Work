lines(MU,dnorm(MU,mu0,sqrt(Vmu)),type="l",col="gray",lwd=2)
dev.off()
##################################################################
###Part 2: Inference on sigma^2 assuming mu is known ####
## Using Class example:
y = c(8.4, 10.1, 9.4) # data
n = length(y)
mu=8 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2; sigmu2=mean((y-mu)^2); b=b0+(n/2)*sigmu2
c(a,sigmu2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(sig2priormean, sig2postmean, sig2cr)
sig2v=seq(0.01,10,0.01)
prior=dgamma(1/sig2v,a0,b0)/sig2v^2
post=dgamma(1/sig2v,a,b)/sig2v^2;
like=dgamma(1/sig2v,a-a0-1,b-b0+0)/sig2v^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sig2v,prior,lty=1,lwd=2); lines(sig2v,like,lty=2,lwd=2)
lines(sig2v,post,lty=3,lwd=2)
points(sig2cr,c(0,0),pch=rep(16,2),cex=rep(1.5,2))
legend(1.8,1.2,
c("Prior density","Likelihood function (normalised)","Posterior density"),
lty=c(1,2,3),lwd=c(2,2,2))
knitr::opts_chunk$set(echo = TRUE)
#Which variable?
#Did for all variables
mle_list <- lapply(crab, mean)
knitr::opts_chunk$set(echo = TRUE)
crab <- read.table("crab.txt",header=TRUE)
head(crab)
mean_list <- lapply(crab, mean)
variance_list <- lapply(crab,var)
range_list <- lapply(crab,range)
list_all <- list(mean_list,variance_list,range_list)
result <- setNames(do.call(rbind.data.frame, list_all), c("color", "spine","width","nSatellites","weight"))
result$Category <- c("Means","Variances","Range_lower","Range_upper")
result
library(tidyr)
library(ggplot2)
crab %>% gather() %>% head()
ggplot(gather(crab), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
x <- seq(-4, 4, length=100)
plot(dnorm(x))
#Which variable?
#Did for all variables
mle_list <- lapply(crab, mean)
print(mle_list)
n <- nrow(crab)
mle_color <- 3.439306 # xbar
mle_spine <- 2.485549 # xbar
mle_width <- 26.29884 # xbar
mle_nSatellites <- 2.919075 # xbar
mle_weight <- 2437.191 # xbar
sigma_color <- sqrt(var(crab$color)) # sigma
sigma_spine <- sqrt(var(crab$spine)) # sigma
sigma_width <- sqrt(var(crab$width)) # sigma
sigma_nSatellites <- sqrt(var(crab$nSatellites)) # sigma
sigma_weight <- sqrt(var(crab$weight)) # sigma
# Confidence Intervals
color_CI <- c(mle_color - (1.96*(sigma_color/sqrt(n))),mle_color + (1.96*(sigma_color/sqrt(n))))
spine_CI <- c(mle_spine - (1.96*(sigma_spine/sqrt(n))),mle_spine + (1.96*(sigma_spine/sqrt(n))))
width_CI <- c(mle_width - (1.96*(sigma_width/sqrt(n))),mle_width + (1.96*(sigma_width/sqrt(n))))
nSatellites_CI <- c(mle_nSatellites - (1.96*(sigma_nSatellites/sqrt(n))),mle_nSatellites + (1.96*(sigma_nSatellites/sqrt(n))))
weight_CI <- c(mle_weight - (1.96*(sigma_weight/sqrt(n))),mle_weight + (1.96*(sigma_weight/sqrt(n))))
n <- length(crab$width)
n
sigma_sq <- var(crab$width)
mustar <- ((1-.99425)*20) + (.99425*26.29884)
mustar
sigma_squared_star <- (.99425 * 1.2)/173
sigma_squared_star
plot(MU,dnorm(MU,mustar[3],sqrt(sigma_squared_star[3])),type="l",col="black",xlab=expression(mu),
ylab=expression(paste(italic("p("),theta,"|",italic(y[1]),"...",
italic(y[n]),",",sigma^2,")",sep="")),lwd=2)
### Plot of Prior and Posterior densities:
#postmean, postvar, mu
MU<-seq(0,50,length=600)
plot(MU,dnorm(MU,mustar[3],sqrt(sigma_squared_star[3])),type="l",col="black",xlab=expression(mu),
ylab=expression(paste(italic("p("),theta,"|",italic(y[1]),"...",
italic(y[n]),",",sigma^2,")",sep="")),lwd=2)
lines(MU,dnorm(MU,mu0,sqrt(Vmu)),type="l",col="gray",lwd=2)
### Plot of Prior and Posterior densities:
#postmean, postvar, mu
plot.new()
MU<-seq(0,50,length=600)
plot(MU,dnorm(MU,mustar[3],sqrt(sigma_squared_star[3])),type="l",col="black",xlab=expression(mu),
ylab=expression(paste(italic("p("),theta,"|",italic(y[1]),"...",
italic(y[n]),",",sigma^2,")",sep="")),lwd=2)
plot(MU,dnorm(MU,mustar[3],sqrt(sigma_squared_star[3])),type="l",col="black")
### Plot of Prior and Posterior densities:
#postmean, postvar, mu
plot.new()
### Plot of Prior and Posterior densities:
#postmean, postvar, mu
expression(mu)
####### Chapter 5 ###
###Part 1: Inference on mu assuming sigma is known ####
# First, let us see how we can generate random samples from a normal distribution
set.seed(10142019)
mu=20  #mean = 20
Vr = 3  # variance = 3
x=rnorm(10000,mean=mu,sd=sqrt(Vr)) # generate  a sample of 10,000 values from normal dist with mean = 20 , sd = sqrt(3)
mean(x)  # mean of our sample
var(x)   # variance of our sample
hist(x,30, prob = TRUE)  # histogram of our sample
curve(dnorm(x, mean=mean(x), sd=sd(x)), add = TRUE, col = "blue")
y=100+2*x
var(y)
mean(y)
hist(y,30)
#################################################
### Compare C.I for MLE estimate & Cred. Int for Bayesian Inference on mu with known sigma
## Assume generate Data with sample mean of 45 (same mean, varying sample size)
ybar=45
n=c(5,20,50) # 3 different sample sizes
Vry=10 # variance of the data
#### Parameters for prior density (usually called hyperparameters)
mu0=20 # prior mean
Vmu=5  # prior variance
## MLE
varMLE=Vry/n
# Approx. 95% CI for the the Max. Likelihod estimator.(frequentist C.I)
CI=rbind(45+c(-1.96,1.96)*sqrt(varMLE[1]),
45+c(-1.96,1.96)*sqrt(varMLE[2]),
45+c(-1.96,1.96)*sqrt(varMLE[3])
)
print(CI)  # Note the changes in the width of the C.I with sample size.
## Posterior density (Bayesian Inference)
tau_data=1/Vry  # precision of a single data-point
tau_mu=1/Vmu   # prior precision
postMean=c(  (tau_mu*mu0 + n[1]*ybar*tau_data)/( tau_mu + n[1]*tau_data) ,
(tau_mu*mu0 + n[2]*ybar*tau_data)/( tau_mu + n[2]*tau_data),
(tau_mu*mu0 + n[3]*ybar*tau_data)/( tau_mu + n[3]*tau_data)
)
print(postMean)
postVar=1/c(	n[1]*tau_data+tau_mu ,
n[2]*tau_data+tau_mu  ,
n[3]*tau_data+tau_mu
)
show(postVar)
## Posterior 95% cred. Interval ( Quantile-based)
CRI=cbind(qnorm(mean=postMean,sd=sqrt(postVar),p=.025),
qnorm(mean=postMean,sd=sqrt(postVar),p=.975))
show(CRI)
show(CI)
## In this case, sample size affects the width of the frequentist CI but not the midpoint
CI[,1]+(CI[,2]-CI[,1])/2 ## Mid point of C.I
## However, because the prior mean is not equal to the data mean, in the Bayesian CR, the midpoint also changes.
CRI[,1]+(CRI[,2]-CRI[,1])/2 ##Mid point of CR.I
### Plot of Prior and Posterior densities:
MU<-seq(0,50,length=600)
plot(MU,dnorm(MU,postMean[3],sqrt(postVar[3])),type="l",col="black",xlab=expression(mu),
ylab=expression(paste(italic("p("),theta,"|",italic(y[1]),"...",
italic(y[n]),",",sigma^2,")",sep="")),lwd=2)
lines(MU,dnorm(MU,mu0,sqrt(Vmu)),type="l",col="gray",lwd=2)
dev.off()
##################################################################
###Part 2: Inference on sigma^2 assuming mu is known ####
## Using Class example:
y = c(8.4, 10.1, 9.4) # data
n = length(y)
mu=8 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2; sigmu2=mean((y-mu)^2); b=b0+(n/2)*sigmu2
c(a,sigmu2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(sig2priormean, sig2postmean, sig2cr)
sig2v=seq(0.01,10,0.01)
prior=dgamma(1/sig2v,a0,b0)/sig2v^2
post=dgamma(1/sig2v,a,b)/sig2v^2;
like=dgamma(1/sig2v,a-a0-1,b-b0+0)/sig2v^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sig2v,prior,lty=1,lwd=2); lines(sig2v,like,lty=2,lwd=2)
lines(sig2v,post,lty=3,lwd=2)
points(sig2cr,c(0,0),pch=rep(16,2),cex=rep(1.5,2))
legend(1.8,1.2,
c("Prior density","Likelihood function (normalised)","Posterior density"),
lty=c(1,2,3),lwd=c(2,2,2))
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sig2v,prior,lty=1,lwd=2); lines(sig2v,like,lty=2,lwd=2)
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sig2v,prior,lty=1,lwd=2); lines(sig2v,like,lty=2,lwd=2)
lines(sig2v,post,lty=3,lwd=2)
points(sig2cr,c(0,0),pch=rep(16,2),cex=rep(1.5,2))
legend(1.8,1.2,
c("Prior density","Likelihood function (normalised)","Posterior density"),
lty=c(1,2,3),lwd=c(2,2,2))
sig2v
getwd()
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sig2v,prior,lty=1,lwd=2); lines(sig2v,like,lty=2,lwd=2)
lines(sig2v,post,lty=3,lwd=2)
sig2v
c(a,sigmu2,b)
sigma2= 1.2 # known mean
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(sig2priormean, sig2postmean, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sig2v^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sig2v,prior,lty=1,lwd=2); lines(sig2v,like,lty=2,lwd=2)
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(sig2priormean, sig2postmean, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sig2v^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sig2v,prior,lty=1,lwd=2); lines(sigma_squared_star,like,lty=2,lwd=2)
lines(sig2v,post,lty=3,lwd=2)
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(sig2priormean, sig2postmean, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sig2v^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sigma_squared_star,prior,lty=1,lwd=2); lines(sigma_squared_star,like,lty=2,lwd=2)
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(ybar, mustar, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sig2v^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sigma_squared_star,prior,lty=1,lwd=2); lines(sigma_squared_star,like,lty=2,lwd=2)
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(ybar, mustar, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sig2v^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
#lines(sigma_squared_star,prior,lty=1,lwd=2); lines(sigma_squared_star,like,lty=2,lwd=2)
lines(sigma_squared_star,post,lty=3,lwd=2)
points(sig2cr,c(0,0),pch=rep(16,2),cex=rep(1.5,2))
legend(1.8,1.2,
c("Prior density","Likelihood function (normalised)","Posterior density"),
lty=c(1,2,3),lwd=c(2,2,2))
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(ybar, mustar, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sig2v^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sigma_squared_star,prior,lty=2,lwd=2); lines(sigma_squared_star,like,lty=2,lwd=2)
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(ybar, mustar, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sig2v^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sigma_squared_star,prior,lty=3,lwd=2); lines(sigma_squared_star,like,lty=3,lwd=2)
y = crab$width # data
n = length(y)
sigma2= 1.2 # known mean
#### Parameters for prior density (usually called hyperparameters)
a0=3 # prior shape parameter
b0=2  # prior scale(rate) parameter
options(digits=4)
a=a0+n/2;
c(a,sigma2,b)
# Inference on sigma2 = 1/lambda
sig2priormean=b0/(a0-1)  # Prior mean for sigma^2
sig2postmean=b/(a-1)
### 95% Cred. Int
sig2cr=1/qgamma(c(0.975,0.025),a,b)
c(ybar, mustar, sig2cr)
sig2v=seq(0.01,10,0.01) # HERE
prior=dgamma(1/sigma_squared_star,a0,b0)/sigma_squared_star^2
post=dgamma(1/sigma_squared_star,a,b)/sigma_squared_star^2;
like=dgamma(1/sigma_squared_star,a-a0-1,b-b0+0)/sigma_squared_star^2
plot(c(0,10),c(0,1.2),type="n",
main="Inference on the model variance parameter",
xlab="sigma^2 = 1/lambda",ylab="density/likelihood")
lines(sigma_squared_star,prior,lty=3,lwd=2); lines(sigma_squared_star,like,lty=3,lwd=2)
lines(sigma_squared_star,post,lty=3,lwd=2)
points(sig2cr,c(0,0),pch=rep(16,2),cex=rep(1.5,2))
legend(1.8,1.2,
c("Prior density","Likelihood function (normalised)","Posterior density"),
lty=c(1,2,3),lwd=c(2,2,2))
rm(list=ls())
ls
setwd("C:/Users/sam/Desktop/STT481_Personal_Work")
library(swirl)
install_course("Exploratory_Data_Analysis")
swirl()
head(EPA)
head(pollition)
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
1
quantile(pmm)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
skip()
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties
| in Each Region")
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1)mar=c(4,4,2,1))
par(mfrow=c(2,1),mar=c(4,4,2,1))
skip()
head(east)
hist(subset(east,region="east"))
hist(east,col="green")
skip()
skip()
pollution
skip()
skip()
skip()
abline(lwd=2,lty=2)
abline(h=12,lwd=2,lty=2)
ar(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
skip()
west <- pollution[pollution$region="west"]
west <- pollution[pollution$region=="west"]
skip()
plot(west$latitude,west$pm25,main="West")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
Devices(faithful,plot)
Devices(faithful,plot(eruptions,waiting))
skip()
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.close()
skip()
head(cars)
plot(speed,dist)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
skip()
1
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,3))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
2
table(airquality$Month)
boxplot(Ozone~Month,airquality)
quit()
