t.test(avg_g_rate_priv,avg_g_rate_pub)
t.test(avg_g_rate_priv,avg_g_rate_pub)
t.test(College_Private$Grad.Rate,College_Public$Grad.Rate)
#9
#View data and remove columns with missing data points
Auto
#Removes any rows with a missing data point
Auto_rm <- na.omit(Auto)
Auto_rm
#View all variables using summary function
summary(Auto_rm)
#Create a vector of all the quantitative variables
quant_vars <- c("mpg","cylinders","displacement","horsepower","weight","acceleration")
#Create a vector of all the qualitative variables
qual_vars <- c("name","year","origin",NA,NA,NA)
#Create and display columns containing quant_vars and qual_vars (quantitative variables and qualitative variables respectively)
Variable_Type <- data.frame(quant_vars,qual_vars)
Variable_Type
#Calculates range of all quantitative variables variables
range(Auto_rm$mpg)
range(Auto_rm$displacement)
range(Auto_rm$acceleration)
#(d)
#Create  data set of rows 10 - 85 of 'Auto_rm'
Auto_rm2 <- Auto_rm[c(-10:-85),]
#Display new data set 'Auto_rm2'
Auto_rm2
#Returns means of key quantitative columns
colMeans(Auto_rm2[1:6])
sapply(Auto_rm2[1:6], sd)
sapply(Auto_rm2[1:6], range)
pairs(Auto_rm)
plot(lm(mpg~ ., data = Auto_rm))
plot(lm(cylinders~ ., data = Auto_rm))
plot(lm(displacement~ ., data = Auto_rm))
plot(lm(horsepower~ ., data = Auto_rm))
plot(lm(weight~ ., data = Auto_rm))
plot(lm(acceleration~ ., data = Auto_rm))
plot(lm(year~ ., data = Auto_rm))
plot(lm(origin~ ., data = Auto_rm))
cor(Auto_rm)
cors(Auto_rm)
cor(Auto_rm[1:10])
cor(Auto_rm[1:10,])
cor(Auto_rm[1:6,])
cor(Auto_rm[1:6])
cor(Auto_rm[1:6])>.75
heatmap(Auto_rm[1:6], Colv = NA, Rowv = NA, scale="column")
Auto_rm[1:6]
heatmap(Auto_rm[1:6])
heatmap(as.matrix(Auto_rm[1:6]), Colv = NA, Rowv = NA, scale="column")
heatmap(as.matrix(Auto_rm[1:6]), Colv = NA, Rowv = NA, scale="row")
heatmap(as.matrix(Auto_rm[1:6]), Colv = NA, Rowv = NA, scale="column")
heatmap(as.matrix(Auto_rm[1:6]), scale="column", col = cm.colors(256))
cor(Auto_rm[1:6])>.75
pairs(Auto_rm[1:6])
plot(lm(mpg~ ., data = Auto_rm[1:6]))
plot(lm(cylinders~ ., data = Auto_rm[1:6]))
plot(lm(displacement~ ., data = Auto_rm[1:6]))
plot(lm(horsepower~ ., data = Auto_rm[1:6]))
plot(lm(weight~ ., data = Auto_rm[1:6]))
plot(lm(acceleration~ ., data = Auto_rm[1:6]))
plot(lm(year~ ., data = Auto_rm[1:6]))
plot(lm(origin~ ., data = Auto_rm[1:6]))
pairs(Auto_rm[1:6])
plot(lm(mpg~ ., data = Auto_rm[1:6]))
plot(lm(cylinders~ ., data = Auto_rm[1:6]))
plot(lm(displacement~ ., data = Auto_rm[1:6]))
plot(lm(horsepower~ ., data = Auto_rm[1:6]))
plot(lm(weight~ ., data = Auto_rm[1:6]))
plot(lm(acceleration~ ., data = Auto_rm[1:6]))
cor(Auto_rm[1:6])
cor(Auto_rm[1:6])>.75
#I created a heat map but it did not end up being useful
#heatmap(as.matrix(Auto_rm[1:6]), scale="column", col = cm.colors(256))
lm(mpg~.,data=Auto_rm[1:6])
summary(lm(mpg~.,data=Auto_rm[1:6]))
plot(lm(mpg~.,data=Auto_rm[1:6]))
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA)+(-10*(GPA*GENDER))
IQ=110
GPA=4
GENDER=1
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA)+(-10*(GPA*GENDER))
Yhat_salary
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))
Yhat_salary
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))
Yhat_salary
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))
Yhat_salary
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))
Yhat_salary
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))+50
Yhat_salary
print(Yhat_salary)
set.seed(1)
x1=runif (100)
x2=0.5*x1+rnorm (100)/10
y=2+2*x1+0.3*x2+rnorm (100)
cor(x1,x2)
plot(x1,x2)
lm(y~x1+x2)
print(lm(y~x1+x2))
summary(lm(y~x1+x2))
summary(lm(y~x1))
summary(lm(y~x2))
x1=c(x1, 0.1)
x2=c(x2, 0.8)
y=c(y,6)
summary(lm(y~x2))
summary(lm(y~x1+x2))
resid_matrix = matrix(rep(0,5000), nrow=1000)
for(i in 1:1000){
n = 100
x = rnorm(n)
y = 5 + 2 * x + rnorm(n, 0.5)
for(j in 1:5){
mat[i,j] = sum(residuals(lm(y ~ poly(x,j,raw=T)))^2)
}
}
for(i in 1:1000){
n = 100
x = rnorm(n)
y = 5 + 2 * x + rnorm(n, 0.5)
for(j in 1:5){
resid_matrix[i,j] = sum(residuals(lm(y ~ poly(x,j,raw=T)))^2)
}
}
resid_matrix
boxplot(resid_matrix)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(knitr)
include_graphics('./Kaggle screen shot STTT 481.png')
include_graphics('./swirl_hw_1_Ex1.PNG')
include_graphics('./swirl_hw_1_Ex2.PNG')
include_graphics('./swirl_hw_1_Ex3.PNG')
include_graphics('./swirl_hw_1_Ex4.PNG')
include_graphics('./swirl_hw_1_Ex5.PNG')
include_graphics('./swirl_hw_1_Ex6.PNG')
include_graphics('./swirl_hw_1_Ex7.PNG')
include_graphics('./swirl_hw_1_Ex8.PNG')
include_graphics('./swirl_hw_1_Ex9.PNG')
include_graphics('./swirl_hw_1_Ex10.PNG')
include_graphics('./swirl_hw_1_Ex11.PNG')
include_graphics('./swirl_hw_1_Ex12.PNG')
include_graphics('./swirl_hw_1_Ex13.PNG')
include_graphics('./swirl_hw_1_Ex14.PNG')
include_graphics('./swirl_hw_1_Ex15.PNG')
#Let's first replicate the df in question #7 from section 2.4
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c("Red","Red","Red","Green","Green","Red")
training_data <- data.frame(X1,X2,X3,Y)
training_data
#(a)
college <- read.csv("College.csv",header = TRUE)
college
#(b)
#Look at data using fix()
fix(college)
#Try the following commands
rownames(college)=college[,1]
fix(college)
college
college=college[,-1]
fix(college)
#Display college, see row.names is set and that extra (prior) column is removed
college
#(c) i.
#Use summary function on data set 'college'
summary(college)
#(c) ii.
#Use pairs function to create scatterplot matrix of first 10 columns of data set 'college'
pairs(college[1:10])
#(c) iii.
boxplot(college$Outstate, college$Private)
#(c) iv.
#Creates a vector of "No"'s dependant on the number of rows in the table
Elite=rep("No",nrow(college))
#Sets the values with a percent of over 50% to be a string "Yes"
Elite[college$Top10perc>50]="Yes"
#Coded "Elite" as a factory (aka category or enumerated type)
Elite=as.factor(Elite)
#Adds 'Elite' column to data set 'college'
college <- data.frame(college ,Elite)
college
#Run summary function on cllege and ensure Eliste is contained
summary(college)
#Get Count of Elite Colleges
number_of_elite <- sum(college$Elite=="Yes")
#Get Percent of Colleges Elite
percent_of_elite <- number_of_elite / (length(college$Elite))
#Boxplot of Out of State vs. Elise
boxplot(college$Outstate,college$Elite)
#(c) v.
#Histograms for College$P.Undergrad
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$P.Undergrad, breaks= 2 )
hist(College$P.Undergrad, breaks= 6 )
hist(College$P.Undergrad, breaks= 9 )
hist(College$P.Undergrad, breaks= 45 )
#(c) v.
#Histograms for College$Room.Board
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$Room.Board, breaks= 2 )
hist(College$Room.Board, breaks= 6 )
hist(College$Room.Board, breaks= 9 )
hist(College$Room.Board, breaks= 45 )
#(c) v.
#Histograms for College$Books
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$Books, breaks= 2 )
hist(College$Books, breaks= 6 )
hist(College$Books, breaks= 9 )
hist(College$Books, breaks= 45 )
#(c) vi.
#This did not end up being useful as there are too many variables
pairs(College)
College_Private = College[College$Private == 'Yes',]
College_Public = College[College$Private == 'No',]
#Create histograms to compare college cost
par(mfrow=c(2,2))
hist(College_Private$Books)
hist(College_Public$Books)
hist(College_Private$Room.Board)
hist(College_Public$Room.Board)
#(c) vi.
avg_g_rate_priv <- mean(College_Private$Grad.Rate)
avg_g_rate_pub <- mean(College_Public$Grad.Rate)
t.test(College_Private$Grad.Rate,College_Public$Grad.Rate)
#9
#View data and remove columns with missing data points
Auto
#Removes any rows with a missing data point
Auto_rm <- na.omit(Auto)
Auto_rm
#View all variables using summary function
summary(Auto_rm)
#Create a vector of all the quantitative variables
quant_vars <- c("mpg","cylinders","displacement","horsepower","weight","acceleration")
#Create a vector of all the qualitative variables
qual_vars <- c("name","year","origin",NA,NA,NA)
#Create and display columns containing quant_vars and qual_vars (quantitative variables and qualitative variables respectively)
Variable_Type <- data.frame(quant_vars,qual_vars)
Variable_Type
#Calculates range of all quantitative variables variables
range(Auto_rm$mpg)
range(Auto_rm$cylinders)
range(Auto_rm$displacement)
range(Auto_rm$horsepower)
range(Auto_rm$weight)
range(Auto_rm$acceleration)
#(c)
#Calc mean and sd of mpg
mean(Auto_rm$mpg)
sd(Auto_rm$mpg)
#Calc mean and sd of cylinders
mean(Auto_rm$cylinders)
sd(Auto_rm$cylinders)
#Calc mean and sd of displacement
mean(Auto_rm$displacement)
sd(Auto_rm$displacement)
#Calc mean and sd of horsepower
mean(Auto_rm$horsepower)
sd(Auto_rm$horsepower)
#Calc mean and sd of weight
mean(Auto_rm$weight)
sd(Auto_rm$weight)
#Calc mean and sd of acceleration
mean(Auto_rm$acceleration)
sd(Auto_rm$acceleration)
#(d)
#Create  data set of rows 10 - 85 of 'Auto_rm'
Auto_rm2 <- Auto_rm[c(-10:-85),]
#Display new data set 'Auto_rm2'
Auto_rm2
#Returns means of key quantitative columns
colMeans(Auto_rm2[1:6])
sapply(Auto_rm2[1:6], sd)
sapply(Auto_rm2[1:6], range)
pairs(Auto_rm[1:6])
plot(lm(mpg~ ., data = Auto_rm[1:6]))
plot(lm(cylinders~ ., data = Auto_rm[1:6]))
plot(lm(displacement~ ., data = Auto_rm[1:6]))
plot(lm(horsepower~ ., data = Auto_rm[1:6]))
plot(lm(weight~ ., data = Auto_rm[1:6]))
plot(lm(acceleration~ ., data = Auto_rm[1:6]))
cor(Auto_rm[1:6])
cor(Auto_rm[1:6])>.75
#I created a heat map but it did not end up being useful
#heatmap(as.matrix(Auto_rm[1:6]), scale="column", col = cm.colors(256))
lm(mpg~.,data=Auto_rm[1:6])
summary(lm(mpg~.,data=Auto_rm[1:6]))
plot(lm(mpg~.,data=Auto_rm[1:6]))
IQ=110
GPA=4
GENDER=1
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))+50
print(Yhat_salary)
resid_matrix = matrix(rep(0,5000), nrow=1000)
for(i in 1:1000){
n = 100
x = rnorm(n)
y = 5 + 2 * x + rnorm(n, 0.5)
for(j in 1:5){
resid_matrix[i,j] = sum(residuals(lm(y ~ poly(x,j,raw=T)))^2)
}
}
boxplot(resid_matrix)
#(a)
#Summarizes
summary(Auto_rm)
#Creates matrix of scatter plots containing all variables in data set
pairs(Auto_rm)
#(b)
#create matrix of correlations, excluding last name columns
pairs(cor(Auto_rm[1:8]))
model.lm1 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm1)
plot(model.lm1)
model.lm2 <- lm(mpg~cylinders*displacement*horsepower*weight*acceleration*year*origin, data = Auto_rm)
summary(model.lm2)
#Model taking into account my intuition and prior knowledge of the data set
model.lm2 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin+ year:mpg+year:horsepower, data = Auto_rm)
#Model taking into account my intuition and prior knowledge of the data set
model.lm3 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin+ year:mpg+year:horsepower, data = Auto_rm)
summary(model.lm3)
model.lm2 <- lm(mpg~cylinders*displacement*horsepower*weight*acceleration*year*origin, data = Auto_rm)
summary(model.lm2)
model.lm3 <- lm(log(mpg)~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm3)
model.lm4 <- lm(sqrt(mpg)~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm4)
model.lm5 <- lm(mpg~cylinders+displacement+horsepower+weight+(acceleration*year)^2+origin, data = Auto_rm)
summary(model.lm5)
Carseats
Carseats_Model1 <- lm(Sales~Price+Urban+US, data = Carseats)
summary(Carseats_Model1)
Carseats
summary(Carseats_Model1)
Carseats_Model2 <- lm(Sales~Price+US, data = Carseats)
summary(Carseats_Model2)
confint(Carseats_Model2)
plot(Carseats_Model2)
set.seed(1)
x=rnorm (100)
y=2*x+rnorm (100)
lm(y~x)
lm(y~x - 1)
lm(y~x +0)
summary(lm(y~x +0))
summary(lm(y~x +0))
summary(lm(y~x))
t_new <- sqrt(n - 1)*(x %*% y)/sqrt(sum(x^2) * sum(y^2) - (x %*% y)^2)
t_new
summary(lm(y~x))
print(summary(lm(y~x)))
print(summary(lm(y~x)))
print(summary(lm(x~y)))
getwd()
setwd("C:\Users\sam\Desktop\STT481_Midterm_Report")
setwd("C:/Users/sam/Desktop/STT481_Midterm_Report")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
test <- read.csv("Data/test.csv")
test <- read.csv("Data/test.csv")
train <- read.csv("Data/train.csv")
test.head(10)
test.head(10)
head(test)
head(train)
summary(test)
setwd("C:\Users\sam\Desktop\STT481_Personal_Work")
setwd("C:/Users/sam/Desktop/STT481_Personal_Work/Homework#2")
ls
knitr::opts_chunk$set(echo = TRUE)
sat <- read.csv("sat.csv")
head(sat)
summary(sat)
Model1 <- lm(sat~expend+income+public+takers ,data=sat)
summary(Model1)
plot(Model1)
arthritis <- read.csv("arthritus.csv")
arthritis <- read.csv("arthritis.csv")
glm(Improved~Treatment+Sex+Age,data=arthritis)
glm(Improved~Treatment+Sex+Age,data=arthritis,family = binomial)
arth_Model1 <- glm(Improved~Treatment+Sex+Age,data=arthritis,family = binomial)
summary(arth_Model1)
plot(arth_Model1)
train.dat <- read.csv("zipcode_train.csv")
train.dat$Y <- as.factor(train.dat$Y)
test.dat <- read.csv("zipcode_test.csv")
test.dat$Y <- as.factor(test.dat$Y)
COLORS <- c("white", "black")
CUSTOM_COLORS <- colorRampPalette(colors = COLORS)
vis <- function(i){
par(pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
z <- matrix(as.numeric(train.dat[i,1:256]), 16, 16)
image(1:16,1:16,z[,16:1], col = CUSTOM_COLORS(256))
}
vis(2) # hand written 1 (from 1 to 1005)
vis(1500) # hand written 2 (from 1006 to 1736)
sat <- read.csv("sat.csv")
head(sat)
summary(sat)
SAT_Model1 <- lm(sat~expend+income+public+takers ,data=sat)
summary(SAT_Model1)
plot(SAT_Model1)
plot(SAT_Model1)
ncvTest(SAT_Model1)
library(linear_model)
library(glm)
library(hccm)
library(car)
install.packages("car")
library(car)
ncvTest(SAT_Model1)
qqPlot(SAT_Model1, main="QQ Plot")
qqPlot(SAT_Model1, main="QQ Plot")
sresid <- studres(SAT_Model1)
library(MASS)
qqPlot(SAT_Model1, main="QQ Plot")
sresid <- studres(SAT_Model1)
hist(sresid, freq=FALSE,
main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
# Assessing Outliers
outlierTest(SAT_Model1) # Bonferonni p-value for most extreme obs
qqPlot(SAT_Model1, main="QQ Plot") #qq plot for studentized resid
leveragePlots(SAT_Model1) # leverage plots
# Influential Observations
# added variable plots
av.Plots(SAT_Model1)
library(cars)
library(car)
av.Plots(SAT_Model1)
avPlots(SAT_Model1)
# Cook's D plot
# identify D values > 4/(n-k-1)
cutoff <- 4/((nrow(mtcars)-length(fit$coefficients)-2))
plot(fit, which=4, cook.levels=cutoff)
# Influence Plot
influencePlot(SAT_Model1, id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
# Influential Observations
# added variable plots
avPlots(SAT_Model1)
# Cook's D plot
# identify D values > 4/(n-k-1)
cutoff <- 4/((nrow(mtcars)-length(SAT_Model1$coefficients)-2))
plot(SAT_Model1, which=4, cook.levels=cutoff)
# Influence Plot
influencePlot(SAT_Model1, id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
pairs(SAT)
pairs(sat)
library(swirl)
install_course("Regression_Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3,
| col='red')
abline(regrline, lwd=3,col='red')
summary(regrline)
lm(child~parent,galton)
fit <- lm(child~parent,galton)
summary(fit)
fit$residuals
mean(fit$residuals)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
2
2
skip()
mean(efit$residuals)
cov(attenu$mag,efit$residuals)
cov(attenu$dist,efit$residuals)
swirl()
swirl()
cor(galton$child,galton$parent)
cor(gpa_nor,gch_nor)
skip()
lm(child~parent,galton)
fit <- lm(child~parent,galton)
skip()
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
skip()
skip()
skip()
skip()
skip()
rm(list=ls())
